/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	var LazySearch = __webpack_require__(1);
	var lazySearch = new LazySearch();
	var billboard = [
	  "Despacito - Luis Fonsi &amp; Daddy Yankee Featuring Justin Bieber",
	  "Wild Thoughts - DJ Khaled Featuring Rihanna &amp; Bryson Tiller",
	  "Bodak Yellow (Money Moves) - Cardi B",
	  "Unforgettable - French Montana Featuring Swae Lee",
	  "Believer - Imagine Dragons",
	  "Attention - Charlie Puth",
	  "There's Nothing Holdin' Me Back - Shawn Mendes",
	  "That's What I Like - Bruno Mars",
	  "Shape Of You - Ed Sheeran",
	  "Body Like A Back Road - Sam Hunt",
	  "I'm The One - DJ Khaled Featuring Justin Bieber, Quavo, Chance The Rapper &amp; Lil Wayne",
	  "Bank Account - 21 Savage",
	  "Strip That Down - Liam Payne Featuring Quavo",
	  "Congratulations - Post Malone Featuring Quavo",
	  "Slow Hands - Niall Horan",
	  "Redbone - Childish Gambino",
	  "Humble. - Kendrick Lamar",
	  "XO TOUR Llif3 - Lil Uzi Vert",
	  "Something Just Like This - The Chainsmokers &amp; Coldplay",
	  "Feels - Calvin Harris Featuring Pharrell Williams, Katy Perry &amp; Big Sean",
	  "Mi Gente - J Balvin &amp; Willy William",
	  "Praying - Kesha",
	  "Stay - Zedd &amp; Alessia Cara",
	  "Rake It Up - Yo Gotti Featuring Nicki Minaj",
	  "Sorry Not Sorry - Demi Lovato",
	  "Feel It Still - Portugal. The Man",
	  "Location - Khalid",
	  "Mask Off - Future",
	  "What About Us - P!nk",
	  "Say You Won't Let Go - James Arthur",
	  "Loyalty. - Kendrick Lamar Featuring Rihanna",
	  "Now Or Never - Halsey",
	  "Versace On The Floor - Bruno Mars",
	  "It Ain't Me - Kygo x Selena Gomez",
	  "Love Galore - SZA Featuring Travis Scott",
	  "Magnolia - Playboi Carti",
	  "1-800-273-8255 - Logic Featuring Alessia Cara &amp; Khalid",
	  "Small Town Boy - Dustin Lynch",
	  "Castle On The Hill - Ed Sheeran",
	  "Everyday We Lit - YFN Lucci Featuring PnB Rock",
	  "Drowning - A Boogie Wit da Hoodie Featuring Kodak Black",
	  "Silence - Marshmello Featuring Khalid",
	  "No Promises - Cheat Codes Featuring Demi Lovato",
	  "What Ifs - Kane Brown Featuring Lauren Alaina",
	  "In Case You Didn't Know - Brett Young",
	  "Slippery - Migos Featuring Gucci Mane",
	  "It's A Vibe - 2 Chainz Featuring Ty Dolla $ign, Trey Songz &amp; Jhene Aiko",
	  "Fetish - Selena Gomez Featuring Gucci Mane",
	  "Young Dumb &amp; Broke - Khalid",
	  "No Such Thing As A Broken Heart - Old Dominion",
	  "Drinkin' Problem - Midland",
	  "The Race - Tay-K",
	  "Felices Los 4 - Maluma",
	  "Crew - GoldLink Featuring Brent Faiyaz &amp; Shy Glizzy",
	  "Heartache On The Dance Floor - Jon Pardi",
	  "Back To You - Louis Tomlinson Featuring Bebe Rexha &amp; Digital Farm Animals",
	  "Thunder - Imagine Dragons",
	  "Butterfly Effect - Travis Scott",
	  "Somebody Else Will - Justin Moore",
	  "Craving You - Thomas Rhett Featuring Maren Morris",
	  "Whatever You Need -  Meek Mill Featuring Chris Brown &amp; Ty Dolla $ign",
	  "Do I Make You Wanna - Billy Currington",
	  "Do Re Mi - Blackbear",
	  "2U - David Guetta Featuring Justin Bieber",
	  "You Look Good - Lady Antebellum",
	  "DNA. - Kendrick Lamar",
	  "Most Girls - Hailee Steinfeld",
	  "When It Rains It Pours - Luke Combs",
	  "Escapate Conmigo - Wisin Featuring Ozuna",
	  "Love. - Kendrick Lamar Featuring Zacari",
	  "Glorious - Macklemore Featuring Skylar Grey",
	  "My Girl - Dylan Scott",
	  "Unforgettable - Thomas Rhett",
	  "Flatliner - Cole Swindell",
	  "The Weekend - SZA",
	  "Reminder - The Weeknd",
	  "Honest - The Chainsmokers",
	  "Malibu - Miley Cyrus",
	  "It Ain't My Fault - Brothers Osborne",
	  "All The Pretty Girls - Kenny Chesney",
	  "New Rules - Dua Lipa",
	  "They Don't Know - Jason Aldean",
	  "Bad Liar - Selena Gomez",
	  "First Day Out - Tee Grizzley",
	  "Every Little Thing - Carly Pearce",
	  "Patty Cake - Kodak Black",
	  "Wish I Knew You - The Revivalists",
	  "More Girls Like You -  Kip Moore",
	  "B.E.D. - Jacquees",
	  "4 AM - 2 Chainz Featuring Travis Scott",
	  "Privacy - Chris Brown",
	  "Something New - Wiz Khalifa Featuring Ty Dolla $ign",
	  "Perplexing Pegasus - Rae Sremmurd",
	  "For Her - Chris Lane",
	  "Untouchable - YoungBoy Never Broke Again",
	  "It's Goin' Down - Descendants 2 Cast",
	  "I Could Use A Love Song - Maren Morris",
	  "Fix A Drink - Chris Janson",
	  "El Amante - Nicky Jam",
	  "Wokeuplikethis* - Playboi Carti Featuring Lil Uzi Vert"];

	function renderList(listData) {
	  var resultEl = document.querySelector("#result");
	  var htmlStr = [];
	  for (var i = 0; i < listData.length; i++) {
	    htmlStr.push(`<li>${listData[i]}</li>`);
	  }
	  resultEl.innerHTML = htmlStr.join("");
	}

	function highlight(plainText, charInfo) {
	  var ret = plainText.split("");
	  var rawData = charInfo._rawData;
	  for (var index, rawDataItem, i = 0; i < rawData.length; i++) {
	    rawDataItem = rawData[i];
	    index = rawDataItem.index;
	    if (index <= ret.length) {
	      ret[index] = "<em>" + ret[index] + "</em>";
	    } else {
	      break;
	    }
	  }
	  return ret.join("");
	}

	document.querySelector("#search").addEventListener("keyup", function () {
	  var keyword = this.value;
	  var ret = [];
	  if (!keyword) {
	    ret = billboard;
	  } else {
	    for (var billboardItem, searchResult, i = 0; i < billboard.length; i++) {
	      billboardItem = billboard[i];
	      searchResult = lazySearch.find(billboardItem, keyword);
	      if (searchResult.length > 0) {
	        ret.push(
	          highlight(billboardItem, searchResult[0])
	        );
	      }
	    }
	  }
	  renderList(ret);
	});

	renderList(billboard);


/***/ },
/* 1 */
/***/ function(module, exports) {

	/**
	 * @class
	 * */
	var LazySearch = function () {
	  if (!(this instanceof LazySearch)) {
	    return new LazySearch();
	  }
	};

	/**
	 * @param {String} contents All contents.
	 * @param {String} searchKeyword Keyword to search.
	 * @return {Object[]} Search results.
	 * */
	LazySearch.prototype.find = function (contents, searchKeyword) {
	  var ret = [];
	  var proto = LazySearch.prototype;
	  var _contents = contents || "";
	  var _searchKeyword = searchKeyword || "";
	  var searchKeywordFirstChar = _searchKeyword.length > 0 ? _searchKeyword[0] : "";
	  var startOffsets = proto._getFirstCharIndices(_contents, searchKeywordFirstChar);
	  for (var k = 0; k < startOffsets.length; k++) {
	    var bucket = [];
	    for (var charIndex, offset = startOffsets[k], i = 0; i < _searchKeyword.length; i++) {
	      var searchKeywordChar = _searchKeyword[i];
	      charIndex = proto._findIndexOf(_contents, searchKeywordChar, offset, null);
	      if (charIndex !== -1) {
	        bucket.push({
	          char: searchKeywordChar,
	          index: charIndex
	        });
	        offset = charIndex + 1;
	      } else {
	        break;
	      }
	    }
	    if (i === _searchKeyword.length) {
	      ret.push(bucket);
	    }
	  }
	  return proto._getInformation(contents, ret);
	};
	/**
	 * @param {String} contents All contents.
	 * @param {String} char Character to find.
	 * @param {Number} offset Starting point the content search offsets.
	 * @param {Object} options Options, default -> { caseSensitive: true }.
	 * @return {Number} Contents index.
	 * */
	LazySearch.prototype._findIndexOf = function _findIndexOf(contents, char, offset, options) {
	  var _contents = contents || "";
	  var _char = char || "";
	  var _offset = Number(offset) || 0;
	  var _options = options || {
	      caseSensitive: true
	    };
	  var ret = -1;
	  var regexp = RegExp(_char, _options.caseSensitive ? "i" : "");
	  for (var i = _offset; i < _contents.length; i++) {
	    if (regexp.test(_contents[i])) {
	      ret = i;
	      break;
	    }
	  }
	  return ret;
	};
	/**
	 * @param {String} contents All contents.
	 * @param {String} char Character to find.
	 * @return {Number[]} Contents indices.
	 * */
	LazySearch.prototype._getFirstCharIndices = function _getFirstCharIndices(contents, char) {
	  var ret = [];
	  var _contents = contents || "";
	  var _char = char || "";
	  var regexp = RegExp(_char, "i");
	  for (var contentChar, i = 0, len = _contents.length; i < len; i++) {
	    contentChar = _contents[i];
	    if (regexp.test(contentChar)) {
	      ret.push(i);
	    }
	  }
	  return ret;
	};
	/**
	 * @param {String} contents All contents.
	 * @param {Object[]} resultData Raw data.
	 * @return {Object[]} Processed information.
	 * */
	LazySearch.prototype._getInformation = function _getInformation(contents, resultData) {
	  var ret = [];
	  var _contents = contents || "";
	  var _resultData = resultData || [];
	  for (var data, i = 0; i < _resultData.length; i++) {
	    var distance = 0;
	    data = _resultData[i];
	    var prevData = null;
	    data.forEach(function (item) {
	      if (prevData) {
	        distance += item.index - prevData.index - 1;
	      }
	      prevData = item;
	    });
	    if (data.length > 0) {
	      ret.push({
	        _rawData: data,
	        contents: _contents.slice(data[0].index, data[data.length - 1].index + 1),
	        distance: distance
	      });
	    }
	  }
	  ret.sort(function (a, b) {
	    return a.distance - b.distance;
	  });
	  return ret;
	};

	module.exports = LazySearch;

/***/ }
/******/ ]);